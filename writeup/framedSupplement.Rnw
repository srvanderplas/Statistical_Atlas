\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage{graphicx,psfrag,epsf}
\usepackage{enumerate}
\usepackage{natbib}

\newcommand{\blind}{0}

\addtolength{\oddsidemargin}{-.75in}%
\addtolength{\evensidemargin}{-.75in}%
\addtolength{\textwidth}{1.5in}%
\addtolength{\textheight}{1.3in}%
\addtolength{\topmargin}{-.8in}%

%%% Extra packages %%%

\usepackage{hyperref}
\usepackage{booktabs}
\usepackage[font=small,skip=5pt]{caption}
\usepackage{setspace}
\usepackage{amssymb}
\usepackage{amstext}
\usepackage[table]{xcolor}
\usepackage{subfig}
\usepackage{paralist}

%%% Settings %%%
\DeclareGraphicsExtensions{.png,.pdf}
\graphicspath{{images/}}

%%% Commenting %%%
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\svp}[1]{{\color{blue} #1}}

\begin{document}
\bibliographystyle{natbib}
\def\spacingset#1{\renewcommand{\baselinestretch}%
{#1}\small\normalsize} \spacingset{1}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\if0\blind
{
\title{\bf Framed! Reproducing 150 year old charts}
  \author{Susan VanderPlas\\
  %\thanks{
  %  The authors gratefully acknowledge \textit{please remember to list all relevant funding sources in the unblinded version}}\hspace{.2cm}\\
    CSAFE, Iowa State University\\
    and \\
    Ryan C Gorluch \\
    Department of Engineering, Iowa State University\\
    and \\
    Heike Hofmann\\
    Department of Statistics, Iowa State University}
  \maketitle
} \fi

\if1\blind
{
  \bigskip
  \bigskip
  \bigskip
  \begin{center}
     {\LARGE\bf  Framed! Reproducing 150 year old charts (Online Supplement)}
  \end{center}
  \medskip
} \fi

\spacingset{1.45}


<<setup, echo=FALSE, warning=FALSE, message=FALSE>>=
library(knitr)
knitr::opts_chunk$set(echo=FALSE, cache=FALSE)
library(tidyverse)
library(ggmosaic)
library(munsell)
library(USAboundaries)
library(RColorBrewer)
library(sf)
library(ggmapr)
@


<<code, echo=FALSE>>=
theme_mosaic <- function (base_size = 11, base_family = "") {
    theme_grey(base_size = base_size, base_family = base_family) %+replace%
        theme(plot.background = element_blank(), plot.margin = grid::unit(c(0,
            0, 0, 0), unit = "cm"), panel.background = element_blank(),
            axis.line = element_blank(), axis.text = element_blank(),
            axis.ticks = element_blank(), axis.title.y = element_blank(),
            legend.key = element_rect(fill = NA, colour = "white"),
            panel.border = element_blank(), panel.grid = element_blank(),
            aspect.ratio = 1)
}

theme_spine <- function (base_size = 11, base_family = "") {
    theme_grey(base_size = base_size, base_family = base_family) %+replace%
        theme(plot.background = element_blank(), plot.margin = grid::unit(c(0,
            0, 0, 0), unit = "cm"), panel.background = element_blank(),
            axis.line = element_blank(), axis.text = element_blank(),
            axis.ticks = element_blank(), #axis.title = element_blank(),
            legend.key = element_rect(fill = NA, colour = "white"),
            panel.border = element_blank(), panel.grid = element_blank(),
            aspect.ratio = 1)
}

createMosaics <- function(data = occ3, state_name = "") {
  occ4 <- occ3 #%>% filter(State==Area.name) # Get only full states

  if (state_name == "") {
    occ4 <- occ4 %>%
      mutate(State = "United States")
  } else if (state_name == "all") {
    occ4 <- occ4
  } else {
    occ4 <- occ4 %>% filter(State == state_name)
  }

  if (nrow(occ4) == 0) return(NULL)

    getMosaic <- function(data) {
      data %>%
        ggplot() +
        geom_mosaic(aes(x = product(Sex, Occupation),
                        fill=Occupation, alpha = Sex, weight = Number),
                    offset = 0.00, colour="grey85", size=0.1) +
        scale_fill_manual(values=cols) + theme_bw() +
        scale_alpha_manual(values=c(0.8,1)) +
        coord_equal() +
        theme(axis.line=element_blank(), axis.text=element_blank(),
              axis.title.y = element_blank(), axis.ticks = element_blank()) +
        xlab(state_name) +
        theme_mosaic() +
        theme(legend.position = "none")
    }

  scalars <- occ4 %>%
    mutate(frame = Occupation=="Unaccounted") %>%
    group_by(State, frame) %>%
    summarize(
      Number = sum(Number)
    ) %>% mutate(
      weight = Number/sum(Number)
    ) %>%
    select(-Number) %>%
    mutate(frame = ifelse(frame, "Unaccommodated", "Accommodated")) %>%
    spread(key = frame, value = weight)

  scalarweight <- scalars %>%
    mutate(Accommodated = sqrt(Accommodated),
           Unaccommodated = 1 - Accommodated) %>%
    mutate(mosaicWt = Accommodated, frameWt = Unaccommodated/2) %>%
    select(-Accommodated, -Unaccommodated)

  getMultiMosaic <- function(data) { # Pass in a single state's data, get out the single state's built data frame
    getMosaic(data) %>%
      ggplot_build() %>%
      magrittr::extract2("data") %>%
      magrittr::extract2(1) %>%
      mutate(State = unique(data$State))
  }

  # make inside plot, then scale
  occ4 %>% filter(Occupation != "Unaccounted") %>%
    split(.$State) %>%
    map_df(getMultiMosaic)

  ggp <- occ4 %>% filter(Occupation != "Unaccounted") %>%
    split(.$State) %>%
    map_df(getMultiMosaic) %>%
    left_join(scalarweight)

  ggp_df <- ggp %>% mutate(
    xmin = xmin*mosaicWt + frameWt,
    xmax = xmax*mosaicWt + frameWt,
    ymin = ymin*mosaicWt + frameWt,
    ymax = ymax*mosaicWt + frameWt
  )

  plot1 <- ggp_df %>%
    ggplot() +
    geom_rect(xmin=0, xmax=1, ymin=0, ymax=1, fill="grey70", colour="grey40", size=.25) +
    geom_rect(aes(xmin=frameWt, xmax=1-frameWt, ymin=frameWt, ymax=1-frameWt), fill="white") +
    geom_rect(aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=fill, alpha=alpha),
              colour="grey85", size=0.1) +
    scale_fill_identity() +
    scale_alpha_identity() +
    xlim(c(0,1)) +
    ylim(c(0,1)) +
    theme_mosaic()

  plot2 <- getMosaic(occ4)

  if (state_name == "all") {
    plot1 <- plot1 + facet_wrap(~State, ncol = 6)
    plot2 <- plot2 + facet_wrap(~State, ncol = 6)
  } else {
    plot1 <- plot1 + xlab(state_name)
    plot2 <- plot2 + xlab(state_name)
  }

  list(plot1=plot1, plot2=plot2)
}


createSpines <- function(data, state_name) {

  spine_df <- data #%>% filter(STATEICP == state_name) # Get only full states

  if (state_name == "") {
    spine_df <- spine_df %>%
      mutate(STATEICP = "United States")
  } else if (state_name == "all") {
    spine_df <- spine_df
  } else {
    spine_df <- spine_df %>% filter(STATEICP == state_name)
  }

  if (nrow(spine_df) == 0) return()

  get_plots <- function(sub_data) {
    sub_data <- sub_data %>% mutate(
      group = factor(group),
      group = reorder(group, -Number)
    )
    lvls <- levels(sub_data$group)
    sub_data$group <- factor(sub_data$group,
                             levels=c(c("Unaccommodated", "Other"),
                                      rev(setdiff(lvls, c("Other", "Unaccommodated")))))

    colormap <- select(sub_data, group, colour) %>% unique
    colormap <- colormap$colour %>% set_names(colormap$group)

    ylabtxt <- ifelse(state_name == "all", "", state_name)

    sub_data <- sub_data %>% arrange(group)
    sub_data %>%
      ggplot() +
      geom_bar(aes(weight = Number,  x = 1, fill = group),
               position = "fill", colour="white", size=0.1) +
      scale_fill_manual("Denomination", values=colormap) + coord_flip() +
      theme_spine() +
      theme(legend.position = "none") + xlab("") +
      ylab(ylabtxt)
  }

  plot2 <- spine_df %>% get_plots()

  scalars <- spine_df %>% mutate(
    type = group=="Unaccommodated"
  ) %>% group_by(type) %>% summarize(
    Number = sum(Number, na.rm = TRUE)
  )

  if (nrow(scalars)==1) {
    plot1 <- plot2
  } else {
  scalars$weight <- scalars$Number/sum(scalars$Number)
  scalars$weight[1] <- sqrt(scalars$weight[1])
  scalars$weight[2] <- 1 - scalars$weight[1]
  spine <- spine_df %>% mutate(Number = replace(Number, group=="Unaccommodated", 0)) %>%
    get_plots()

  spine_wo_df <- ggplot_build(spine)$data[[1]] %>% mutate(
    xmin = scalars$weight[2]/2,
    xmax = scalars$weight[1] + scalars$weight[2]/2,
    ymin = ymin*scalars$weight[1] + scalars$weight[2]/2,
    ymax = ymax*scalars$weight[1] + scalars$weight[2]/2
  )
  plot1 <- spine_wo_df %>%
    ggplot(aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)) +
    geom_rect(aes(xmin=0, xmax=1, ymin=0, ymax=1), fill="grey60", colour="grey30", size=.5) +
    geom_rect(aes(fill=fill), colour="white", size=0.1) +
    scale_fill_identity() +
    coord_flip() +
    theme_spine() +
    ylab(state_name)
  }
  list(plot1=plot1, plot2=plot2)
}


createPie <- function(data, state_name) {
  spine_df <- data %>% filter(STATEICP == state_name)
  if (nrow(spine_df) == 0) return()

  get_plots <- function(sub_data) {
    sub_data <- sub_data %>% mutate(
      group = factor(group),
      group = reorder(group, -Number)
    )
    lvls <- levels(sub_data$group)
    sub_data$group <- factor(sub_data$group,
                             levels=c(c("Unaccommodated", "Other"),
                                      rev(setdiff(lvls, c("Other", "Unaccommodated")))))
    sub_data %>% arrange(desc(group)) %>%
      ggplot() +
      geom_bar(aes(weight = Number,  x = STATEICP, fill = group),
               position = "fill", colour="white", size=0.1,
               width=1) +
      scale_fill_manual("Denomination", values = rev(colHEX)[-c(2:4)]) +
      theme_mosaic() +
      theme(legend.position = "none") + ylab("") +
      ylab(state_name) + coord_polar(theta="y")
  }
  plot2 <- spine_df %>% get_plots()
  scalars <- spine_df %>% mutate(
    type = group=="Unaccommodated"
  ) %>% group_by(type) %>% summarize(
    Number = sum(Number, na.rm = TRUE)
  )
  if (nrow(scalars)==1) plot1 <- plot2
  else {
  scalars$weight <- scalars$Number/sum(scalars$Number)
  scalars$weight[1] <- sqrt(scalars$weight[1])
  scalars$weight[2] <- 1 - scalars$weight[1]
  spine <- spine_df %>% mutate(Number = replace(Number, group=="Unaccommodated", 0)) %>%
    get_plots()

  spine_wo_df <- ggplot_build(spine)$data[[1]] %>% mutate(
    xmin = 0,
    xmax = scalars$weight[1]
  )
  plot1 <- spine_wo_df %>%
    ggplot(aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)) +
    geom_rect(aes(xmin=0, xmax=1, ymin=0, ymax=1), fill="grey60") +
    geom_rect(aes(fill=fill),  colour="white", size=0.1) +
    coord_polar(theta="y") +
    scale_fill_identity() +
    theme_mosaic() +
    ylab(state_name)
  }
  list(plot1=plot1, plot2=plot2)
}


@

<<data, cache=TRUE, message = F, warning = F>>=
### Data #####
datapath <- "../data"
px2 <- read.csv(file.path(datapath, "px2.csv"), stringsAsFactors = FALSE)
occ2 <- read.csv(file.path(datapath, "occ2.csv"), stringsAsFactors = FALSE)
occ3 <- read.csv(file.path(datapath, "occ3.csv"), stringsAsFactors = FALSE)
church <- read.csv(file.path(datapath, "denominations-1874.csv"),
                   stringsAsFactors = FALSE)
churchPixel <- read.csv(file.path(datapath, "church_pixel.csv"),
                        stringsAsFactors = FALSE)


percentages <- readr::read_csv(file.path(datapath, "study-results.csv"))
questions <- readr::read_csv(file.path(datapath, "PlotLabels.csv"))
percentages <- left_join(percentages, questions)

occ2 <- occ2 %>% mutate(
  Occupation = factor(Occupation, levels =
                        c("Agriculture", "Manufacturing",
                          "Trade", "Service", "School")),
  Gender = factor(Gender, levels = c("Male", "Female")),
  State = as.character(State),
  Area.Name = as.character(Area.Name)
)

occ3 <- occ3 %>% mutate(
  Occupation = factor(Occupation, levels =
                        c("Agriculture", "Manufacturing",
                          "Trade", "Service", "School", "Unaccounted")),
  Sex = factor(Sex, levels = c("Male", "Female")),
  State = as.character(State),
  Area.name = as.character(Area.name)
) %>%
  mutate(State = str_replace_all(
    State,
    c("(Arizona|New Mexico|Utah|Colorado) Territory" = "Southwest Territories",
      "(Idaho|Wyoming|Washington|Montana|Dakota) Territory" = "Northwest Territories")))

stateorder <- unique(occ3$State)
stateorder <- c(stateorder[-which(stateorder %in% c("District of Columbia", "Northwest Territories", "Southwest Territories"))],
                c("District of Columbia", "Northwest Territories", "Southwest Territories"))
occ3$State <- factor(occ3$State, levels = stateorder, ordered = T)

# colours for church denominations
cols = c(brewer.pal(n = 12, name = "Paired")[c(1,3,5,7,9,11)], "grey80")

colRGB <- t(col2rgb(cols))/256
colMNSL <- rgb2mnsl(colRGB)
colMNSL <- c(colMNSL,
             darker(colMNSL, steps = 2),
             darker(colMNSL, steps = 4))

colHEX <- mnsl(colMNSL)
colHEX <- colHEX[rep(0:6, each = 3) + c(1, 8, 15)]
colHEX <- c(colHEX, "grey60")


cl <- church %>% gather(key = Denomination,
                        value = Number,
                        Baptist:Universalist, Unaccommodated)
cl <- cl %>% mutate(Denomination =
                      reorder(Denomination, Number, na.rm = TRUE))

cl$Denomination <- factor(cl$Denomination,
                          c("Unaccommodated", levels(cl$Denomination)[-20]))
levels(cl$Denomination) <- gsub("\\.", " ", levels(cl$Denomination))


cl_data <- cl %>% filter(as.character(STATEICP)==as.character(State)) %>%
  group_by(STATEICP) %>% nest()

cl_data$data <- cl_data$data %>% purrr::map(.f = function(x) {
  x %>%  arrange(desc(Number)) %>% mutate(
    group = c(as.character(Denomination[1:5]), rep("Other", n() - 5))
  ) %>% group_by(group) %>% summarize(Number = sum(Number, na.rm=TRUE))
})

cl_data <- cl_data %>% unnest()

cl_data <- cl_data %>% group_by(group) %>% mutate(Total = sum(Number, na.rm=TRUE))
cl_data <- cl_data %>% ungroup(group) %>% mutate(
  group = reorder(group, -Total, na.rm=TRUE)
)
# put other and unaccommodated last:
levels <- levels(cl_data$group)
cl_data$group <- factor(cl_data$group, levels=c(setdiff(levels, c("Unaccommodated", "Other")), "Other", "Unaccommodated"))
cl_data$colour <- colHEX[as.numeric(cl_data$group)]
cl_data$colour <- with(cl_data, replace(colour, group=="Unaccommodated", "grey60"))

#cl_data %>% filter(STATEICP=="Michigan") %>% ggplot(aes(group, weight=Total, fill=colour)) + geom_bar()  + scale_fill_identity() + coord_flip()
@



\section{Plate 32: Gender Ratio in Agriculture, Trade, Service, Manufacturing, and Schools}
<<plate32-repro, dependson="data", include = T, out.width = "\\textwidth", fig.width = 7.5, fig.height = 10, warning = F, message = F, fig.cap = "Reproduction of plate \\#32.", fig.align='center'>>=
cols <- c("#30200c", "#000066", "#cc9900", "#4d374a", "#9e7637", "grey60")

tmp <- createMosaics(state_name = "all")
tmp$plot1
@


\section{Plate 31: Church Accommodations By State}

% Reproduce all plots from plate 31
<<plate31-repro, dependson="data", include = T, out.width = "\\textwidth", fig.width = 7.5, fig.height = 10, warning = F, message = F, fig.cap = "Reproduction of plate \\#32.", fig.align='center'>>=

# Need to fix this to do frames for each state separately. Should be able to rip off the mosaic code...
tmp <- createSpines(data = cl_data, state_name = "all")
# It works for the unframed plots...
tmp$plot2 + facet_wrap(~STATEICP)
@

\section{Experimental Details}
% Screenshot from one question

% Link to anonymized data - digest on any ID/IP address/etc.

% Participant demographics


\end{document}
